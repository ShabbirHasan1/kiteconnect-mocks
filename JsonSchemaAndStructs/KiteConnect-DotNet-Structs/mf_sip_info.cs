// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var mfSipInfo = MfSipInfo.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MfSipInfo
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }

        [JsonProperty("$schema")]
        public Uri Schema { get; set; }

        [JsonProperty("definitions")]
        public Definitions Definitions { get; set; }
    }

    public partial class Definitions
    {
        [JsonProperty("Data")]
        public Data Data { get; set; }

        [JsonProperty("MFSIPInfo")]
        public MfsipInfoClass MfsipInfo { get; set; }

        [JsonProperty("StepUp")]
        public StepUpClass StepUp { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public DataProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] DataRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class DataProperties
    {
        [JsonProperty("completed_instalments")]
        public CompletedInstalments CompletedInstalments { get; set; }

        [JsonProperty("created")]
        public Created Created { get; set; }

        [JsonProperty("dividend_type")]
        public CompletedInstalments DividendType { get; set; }

        [JsonProperty("frequency")]
        public CompletedInstalments Frequency { get; set; }

        [JsonProperty("fund")]
        public CompletedInstalments Fund { get; set; }

        [JsonProperty("fund_source")]
        public CompletedInstalments FundSource { get; set; }

        [JsonProperty("instalment_amount")]
        public CompletedInstalments InstalmentAmount { get; set; }

        [JsonProperty("instalment_day")]
        public CompletedInstalments InstalmentDay { get; set; }

        [JsonProperty("instalments")]
        public CompletedInstalments Instalments { get; set; }

        [JsonProperty("last_instalment")]
        public Created LastInstalment { get; set; }

        [JsonProperty("next_instalment")]
        public Created NextInstalment { get; set; }

        [JsonProperty("pending_instalments")]
        public CompletedInstalments PendingInstalments { get; set; }

        [JsonProperty("sip_id")]
        public CompletedInstalments SipId { get; set; }

        [JsonProperty("sip_reg_num")]
        public CompletedInstalments SipRegNum { get; set; }

        [JsonProperty("sip_type")]
        public CompletedInstalments SipType { get; set; }

        [JsonProperty("status")]
        public CompletedInstalments Status { get; set; }

        [JsonProperty("step_up")]
        public StepUp StepUp { get; set; }

        [JsonProperty("tag")]
        public CompletedInstalments Tag { get; set; }

        [JsonProperty("tradingsymbol")]
        public CompletedInstalments Tradingsymbol { get; set; }

        [JsonProperty("transaction_type")]
        public CompletedInstalments TransactionType { get; set; }

        [JsonProperty("trigger_price")]
        public CompletedInstalments TriggerPrice { get; set; }
    }

    public partial class CompletedInstalments
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class Created
    {
        [JsonProperty("format")]
        public string Format { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class StepUp
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }
    }

    public partial class MfsipInfoClass
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public MfsipInfoProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] MfsipInfoClassRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class MfsipInfoProperties
    {
        [JsonProperty("data")]
        public StepUp Data { get; set; }

        [JsonProperty("status")]
        public CompletedInstalments Status { get; set; }
    }

    public partial class StepUpClass
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public StepUpProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] StepUpClassRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class StepUpProperties
    {
        [JsonProperty("15-02")]
        public CompletedInstalments The1502 { get; set; }
    }

    public enum TypeEnum { Integer, Null, Number, String };

    public partial class MfSipInfo
    {
        public static MfSipInfo FromJson(string json) => JsonConvert.DeserializeObject<MfSipInfo>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MfSipInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "integer":
                    return TypeEnum.Integer;
                case "null":
                    return TypeEnum.Null;
                case "number":
                    return TypeEnum.Number;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Integer:
                    serializer.Serialize(writer, "integer");
                    return;
                case TypeEnum.Null:
                    serializer.Serialize(writer, "null");
                    return;
                case TypeEnum.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
