// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var quote = Quote.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Quote
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }

        [JsonProperty("$schema")]
        public Uri Schema { get; set; }

        [JsonProperty("definitions")]
        public Definitions Definitions { get; set; }
    }

    public partial class Definitions
    {
        [JsonProperty("Buy")]
        public Buy Buy { get; set; }

        [JsonProperty("Data")]
        public Data Data { get; set; }

        [JsonProperty("Depth")]
        public Depth Depth { get; set; }

        [JsonProperty("NseInfy")]
        public NseInfyClass NseInfy { get; set; }

        [JsonProperty("Ohlc")]
        public Ohlc Ohlc { get; set; }

        [JsonProperty("Quote")]
        public QuoteClass Quote { get; set; }
    }

    public partial class Buy
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public BuyProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] BuyRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class BuyProperties
    {
        [JsonProperty("orders")]
        public Orders Orders { get; set; }

        [JsonProperty("price")]
        public Orders Price { get; set; }

        [JsonProperty("quantity")]
        public Orders Quantity { get; set; }
    }

    public partial class Orders
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public DataProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] DataRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class DataProperties
    {
        [JsonProperty("NSE:INFY")]
        public NseInfy NseInfy { get; set; }
    }

    public partial class NseInfy
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; }
    }

    public partial class Depth
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public DepthProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] DepthRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class DepthProperties
    {
        [JsonProperty("buy")]
        public BuyClass Buy { get; set; }

        [JsonProperty("sell")]
        public BuyClass Sell { get; set; }
    }

    public partial class BuyClass
    {
        [JsonProperty("items")]
        public NseInfy Items { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class NseInfyClass
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public NseInfyProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] NseInfyClassRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class NseInfyProperties
    {
        [JsonProperty("average_price")]
        public Orders AveragePrice { get; set; }

        [JsonProperty("buy_quantity")]
        public Orders BuyQuantity { get; set; }

        [JsonProperty("depth")]
        public NseInfy Depth { get; set; }

        [JsonProperty("instrument_token")]
        public Orders InstrumentToken { get; set; }

        [JsonProperty("last_price")]
        public Orders LastPrice { get; set; }

        [JsonProperty("last_quantity")]
        public Orders LastQuantity { get; set; }

        [JsonProperty("last_trade_time")]
        public LastTradeTime LastTradeTime { get; set; }

        [JsonProperty("lower_circuit_limit")]
        public Orders LowerCircuitLimit { get; set; }

        [JsonProperty("net_change")]
        public Orders NetChange { get; set; }

        [JsonProperty("ohlc")]
        public NseInfy Ohlc { get; set; }

        [JsonProperty("oi")]
        public Orders Oi { get; set; }

        [JsonProperty("oi_day_high")]
        public Orders OiDayHigh { get; set; }

        [JsonProperty("oi_day_low")]
        public Orders OiDayLow { get; set; }

        [JsonProperty("sell_quantity")]
        public Orders SellQuantity { get; set; }

        [JsonProperty("timestamp")]
        public LastTradeTime Timestamp { get; set; }

        [JsonProperty("upper_circuit_limit")]
        public Orders UpperCircuitLimit { get; set; }

        [JsonProperty("volume")]
        public Orders Volume { get; set; }
    }

    public partial class LastTradeTime
    {
        [JsonProperty("format")]
        public string Format { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class Ohlc
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public OhlcProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] OhlcRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class OhlcProperties
    {
        [JsonProperty("close")]
        public Orders Close { get; set; }

        [JsonProperty("high")]
        public Orders High { get; set; }

        [JsonProperty("low")]
        public Orders Low { get; set; }

        [JsonProperty("open")]
        public Orders Open { get; set; }
    }

    public partial class QuoteClass
    {
        [JsonProperty("additionalProperties")]
        public bool AdditionalProperties { get; set; }

        [JsonProperty("properties")]
        public QuoteProperties Properties { get; set; }

        [JsonProperty("required")]
        public string[] QuoteClassRequired { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class QuoteProperties
    {
        [JsonProperty("data")]
        public NseInfy Data { get; set; }

        [JsonProperty("status")]
        public Orders Status { get; set; }
    }

    public enum TypeEnum { Integer, Number, String };

    public partial class Quote
    {
        public static Quote FromJson(string json) => JsonConvert.DeserializeObject<Quote>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Quote self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "integer":
                    return TypeEnum.Integer;
                case "number":
                    return TypeEnum.Number;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Integer:
                    serializer.Serialize(writer, "integer");
                    return;
                case TypeEnum.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
