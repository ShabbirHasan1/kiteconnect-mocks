// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class Ltp {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

Ltp Ltp_from_JSON(mixed json) {
    Ltp retval = Ltp();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Data         data;     // json: "Data"
    LtpClass     ltp;      // json: "Ltp"
    NseInfyClass nse_infy; // json: "NseInfy"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Data" : data,
            "Ltp" : ltp,
            "NseInfy" : nse_infy,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.data = json["Data"];
    retval.ltp = json["Ltp"];
    retval.nse_infy = json["NseInfy"];

    return retval;
}

class Data {
    bool           additional_properties; // json: "additionalProperties"
    DataProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DataProperties {
    NseInfy nse_infy; // json: "NSE:INFY"

    string encode_json() {
        mapping(string:mixed) json = ([
            "NSE:INFY" : nse_infy,
        ]);

        return Standards.JSON.encode(json);
    }
}

DataProperties DataProperties_from_JSON(mixed json) {
    DataProperties retval = DataProperties();

    retval.nse_infy = json["NSE:INFY"];

    return retval;
}

class NseInfy {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfy NseInfy_from_JSON(mixed json) {
    NseInfy retval = NseInfy();

    retval.ref = json["$ref"];

    return retval;
}

class LtpClass {
    bool          additional_properties; // json: "additionalProperties"
    LtpProperties properties;            // json: "properties"
    array(string) required;              // json: "required"
    string        title;                 // json: "title"
    string        type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

LtpClass LtpClass_from_JSON(mixed json) {
    LtpClass retval = LtpClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class LtpProperties {
    NseInfy data;   // json: "data"
    Status  status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

LtpProperties LtpProperties_from_JSON(mixed json) {
    LtpProperties retval = LtpProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Status {
    string type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Status Status_from_JSON(mixed json) {
    Status retval = Status();

    retval.type = json["type"];

    return retval;
}

class NseInfyClass {
    bool              additional_properties; // json: "additionalProperties"
    NseInfyProperties properties;            // json: "properties"
    array(string)     required;              // json: "required"
    string            title;                 // json: "title"
    string            type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfyClass NseInfyClass_from_JSON(mixed json) {
    NseInfyClass retval = NseInfyClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class NseInfyProperties {
    Status instrument_token; // json: "instrument_token"
    Status last_price;       // json: "last_price"

    string encode_json() {
        mapping(string:mixed) json = ([
            "instrument_token" : instrument_token,
            "last_price" : last_price,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfyProperties NseInfyProperties_from_JSON(mixed json) {
    NseInfyProperties retval = NseInfyProperties();

    retval.instrument_token = json["instrument_token"];
    retval.last_price = json["last_price"];

    return retval;
}
