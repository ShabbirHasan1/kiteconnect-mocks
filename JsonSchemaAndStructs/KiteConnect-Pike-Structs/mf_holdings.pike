// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class MfHoldings {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfHoldings MfHoldings_from_JSON(mixed json) {
    MfHoldings retval = MfHoldings();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Datum           datum;       // json: "Datum"
    MfHoldingsClass mf_holdings; // json: "MFHoldings"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Datum" : datum,
            "MFHoldings" : mf_holdings,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.datum = json["Datum"];
    retval.mf_holdings = json["MFHoldings"];

    return retval;
}

class Datum {
    bool            additional_properties; // json: "additionalProperties"
    DatumProperties properties;            // json: "properties"
    array(string)   required;              // json: "required"
    string          title;                 // json: "title"
    string          type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DatumProperties {
    AveragePrice average_price;    // json: "average_price"
    AveragePrice folio;            // json: "folio"
    AveragePrice fund;             // json: "fund"
    AveragePrice last_price;       // json: "last_price"
    AveragePrice last_price_date;  // json: "last_price_date"
    AveragePrice pledged_quantity; // json: "pledged_quantity"
    AveragePrice pnl;              // json: "pnl"
    AveragePrice quantity;         // json: "quantity"
    AveragePrice tradingsymbol;    // json: "tradingsymbol"

    string encode_json() {
        mapping(string:mixed) json = ([
            "average_price" : average_price,
            "folio" : folio,
            "fund" : fund,
            "last_price" : last_price,
            "last_price_date" : last_price_date,
            "pledged_quantity" : pledged_quantity,
            "pnl" : pnl,
            "quantity" : quantity,
            "tradingsymbol" : tradingsymbol,
        ]);

        return Standards.JSON.encode(json);
    }
}

DatumProperties DatumProperties_from_JSON(mixed json) {
    DatumProperties retval = DatumProperties();

    retval.average_price = json["average_price"];
    retval.folio = json["folio"];
    retval.fund = json["fund"];
    retval.last_price = json["last_price"];
    retval.last_price_date = json["last_price_date"];
    retval.pledged_quantity = json["pledged_quantity"];
    retval.pnl = json["pnl"];
    retval.quantity = json["quantity"];
    retval.tradingsymbol = json["tradingsymbol"];

    return retval;
}

class AveragePrice {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

AveragePrice AveragePrice_from_JSON(mixed json) {
    AveragePrice retval = AveragePrice();

    retval.type = json["type"];

    return retval;
}

enum Type {
    INTEGER = "integer", // json: "integer"
    NUMBER = "number",   // json: "number"
    STRING = "string",   // json: "string"
}

class MfHoldingsClass {
    bool                 additional_properties; // json: "additionalProperties"
    MfHoldingsProperties properties;            // json: "properties"
    array(string)        required;              // json: "required"
    string               title;                 // json: "title"
    string               type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfHoldingsClass MfHoldingsClass_from_JSON(mixed json) {
    MfHoldingsClass retval = MfHoldingsClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class MfHoldingsProperties {
    Data         data;   // json: "data"
    AveragePrice status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfHoldingsProperties MfHoldingsProperties_from_JSON(mixed json) {
    MfHoldingsProperties retval = MfHoldingsProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Items  items; // json: "items"
    string type;  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "items" : items,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.items = json["items"];
    retval.type = json["type"];

    return retval;
}

class Items {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

Items Items_from_JSON(mixed json) {
    Items retval = Items();

    retval.ref = json["$ref"];

    return retval;
}
