// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class MfOrders {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfOrders MfOrders_from_JSON(mixed json) {
    MfOrders retval = MfOrders();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Datum         datum;     // json: "Datum"
    MfOrdersClass mf_orders; // json: "MFOrders"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Datum" : datum,
            "MFOrders" : mf_orders,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.datum = json["Datum"];
    retval.mf_orders = json["MFOrders"];

    return retval;
}

class Datum {
    bool            additional_properties; // json: "additionalProperties"
    DatumProperties properties;            // json: "properties"
    array(string)   required;              // json: "required"
    string          title;                 // json: "title"
    string          type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DatumProperties {
    Amount          amount;             // json: "amount"
    Amount          average_price;      // json: "average_price"
    ExchangeOrderId exchange_order_id;  // json: "exchange_order_id"
    ExchangeOrderId exchange_timestamp; // json: "exchange_timestamp"
    Amount          folio;              // json: "folio"
    Amount          fund;               // json: "fund"
    Amount          last_price;         // json: "last_price"
    LastPriceDate   last_price_date;    // json: "last_price_date"
    LastPriceDate   order_id;           // json: "order_id"
    LastPriceDate   order_timestamp;    // json: "order_timestamp"
    Amount          placed_by;          // json: "placed_by"
    Amount          purchase_type;      // json: "purchase_type"
    Amount          quantity;           // json: "quantity"
    ExchangeOrderId settlement_id;      // json: "settlement_id"
    Amount          status;             // json: "status"
    Amount          status_message;     // json: "status_message"
    Tag             tag;                // json: "tag"
    Amount          tradingsymbol;      // json: "tradingsymbol"
    Amount          transaction_type;   // json: "transaction_type"
    Amount          variety;            // json: "variety"

    string encode_json() {
        mapping(string:mixed) json = ([
            "amount" : amount,
            "average_price" : average_price,
            "exchange_order_id" : exchange_order_id,
            "exchange_timestamp" : exchange_timestamp,
            "folio" : folio,
            "fund" : fund,
            "last_price" : last_price,
            "last_price_date" : last_price_date,
            "order_id" : order_id,
            "order_timestamp" : order_timestamp,
            "placed_by" : placed_by,
            "purchase_type" : purchase_type,
            "quantity" : quantity,
            "settlement_id" : settlement_id,
            "status" : status,
            "status_message" : status_message,
            "tag" : tag,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
            "variety" : variety,
        ]);

        return Standards.JSON.encode(json);
    }
}

DatumProperties DatumProperties_from_JSON(mixed json) {
    DatumProperties retval = DatumProperties();

    retval.amount = json["amount"];
    retval.average_price = json["average_price"];
    retval.exchange_order_id = json["exchange_order_id"];
    retval.exchange_timestamp = json["exchange_timestamp"];
    retval.folio = json["folio"];
    retval.fund = json["fund"];
    retval.last_price = json["last_price"];
    retval.last_price_date = json["last_price_date"];
    retval.order_id = json["order_id"];
    retval.order_timestamp = json["order_timestamp"];
    retval.placed_by = json["placed_by"];
    retval.purchase_type = json["purchase_type"];
    retval.quantity = json["quantity"];
    retval.settlement_id = json["settlement_id"];
    retval.status = json["status"];
    retval.status_message = json["status_message"];
    retval.tag = json["tag"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];
    retval.variety = json["variety"];

    return retval;
}

class Amount {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Amount Amount_from_JSON(mixed json) {
    Amount retval = Amount();

    retval.type = json["type"];

    return retval;
}

enum Type {
    NULL = "null",     // json: "null"
    NUMBER = "number", // json: "number"
    STRING = "string", // json: "string"
}

class ExchangeOrderId {
    array(LastPriceDate) any_of; // json: "anyOf"

    string encode_json() {
        mapping(string:mixed) json = ([
            "anyOf" : any_of,
        ]);

        return Standards.JSON.encode(json);
    }
}

ExchangeOrderId ExchangeOrderId_from_JSON(mixed json) {
    ExchangeOrderId retval = ExchangeOrderId();

    retval.any_of = json["anyOf"];

    return retval;
}

class LastPriceDate {
    mixed|string format; // json: "format"
    Type         type;   // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "format" : format,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

LastPriceDate LastPriceDate_from_JSON(mixed json) {
    LastPriceDate retval = LastPriceDate();

    retval.format = json["format"];
    retval.type = json["type"];

    return retval;
}

class Tag {
    array(Amount) any_of; // json: "anyOf"

    string encode_json() {
        mapping(string:mixed) json = ([
            "anyOf" : any_of,
        ]);

        return Standards.JSON.encode(json);
    }
}

Tag Tag_from_JSON(mixed json) {
    Tag retval = Tag();

    retval.any_of = json["anyOf"];

    return retval;
}

class MfOrdersClass {
    bool               additional_properties; // json: "additionalProperties"
    MfOrdersProperties properties;            // json: "properties"
    array(string)      required;              // json: "required"
    string             title;                 // json: "title"
    string             type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfOrdersClass MfOrdersClass_from_JSON(mixed json) {
    MfOrdersClass retval = MfOrdersClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class MfOrdersProperties {
    Data   data;   // json: "data"
    Amount status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfOrdersProperties MfOrdersProperties_from_JSON(mixed json) {
    MfOrdersProperties retval = MfOrdersProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Items  items; // json: "items"
    string type;  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "items" : items,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.items = json["items"];
    retval.type = json["type"];

    return retval;
}

class Items {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

Items Items_from_JSON(mixed json) {
    Items retval = Items();

    retval.ref = json["$ref"];

    return retval;
}
