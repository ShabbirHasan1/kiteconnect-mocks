// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class MfSipInfo {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfSipInfo MfSipInfo_from_JSON(mixed json) {
    MfSipInfo retval = MfSipInfo();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Data           data;       // json: "Data"
    MfsipInfoClass mfsip_info; // json: "MFSIPInfo"
    StepUpClass    step_up;    // json: "StepUp"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Data" : data,
            "MFSIPInfo" : mfsip_info,
            "StepUp" : step_up,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.data = json["Data"];
    retval.mfsip_info = json["MFSIPInfo"];
    retval.step_up = json["StepUp"];

    return retval;
}

class Data {
    bool           additional_properties; // json: "additionalProperties"
    DataProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DataProperties {
    CompletedInstalments completed_instalments; // json: "completed_instalments"
    Created              created;               // json: "created"
    CompletedInstalments dividend_type;         // json: "dividend_type"
    CompletedInstalments frequency;             // json: "frequency"
    CompletedInstalments fund;                  // json: "fund"
    CompletedInstalments fund_source;           // json: "fund_source"
    CompletedInstalments instalment_amount;     // json: "instalment_amount"
    CompletedInstalments instalment_day;        // json: "instalment_day"
    CompletedInstalments instalments;           // json: "instalments"
    Created              last_instalment;       // json: "last_instalment"
    Created              next_instalment;       // json: "next_instalment"
    CompletedInstalments pending_instalments;   // json: "pending_instalments"
    CompletedInstalments sip_id;                // json: "sip_id"
    CompletedInstalments sip_reg_num;           // json: "sip_reg_num"
    CompletedInstalments sip_type;              // json: "sip_type"
    CompletedInstalments status;                // json: "status"
    StepUp               step_up;               // json: "step_up"
    CompletedInstalments tag;                   // json: "tag"
    CompletedInstalments tradingsymbol;         // json: "tradingsymbol"
    CompletedInstalments transaction_type;      // json: "transaction_type"
    CompletedInstalments trigger_price;         // json: "trigger_price"

    string encode_json() {
        mapping(string:mixed) json = ([
            "completed_instalments" : completed_instalments,
            "created" : created,
            "dividend_type" : dividend_type,
            "frequency" : frequency,
            "fund" : fund,
            "fund_source" : fund_source,
            "instalment_amount" : instalment_amount,
            "instalment_day" : instalment_day,
            "instalments" : instalments,
            "last_instalment" : last_instalment,
            "next_instalment" : next_instalment,
            "pending_instalments" : pending_instalments,
            "sip_id" : sip_id,
            "sip_reg_num" : sip_reg_num,
            "sip_type" : sip_type,
            "status" : status,
            "step_up" : step_up,
            "tag" : tag,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
            "trigger_price" : trigger_price,
        ]);

        return Standards.JSON.encode(json);
    }
}

DataProperties DataProperties_from_JSON(mixed json) {
    DataProperties retval = DataProperties();

    retval.completed_instalments = json["completed_instalments"];
    retval.created = json["created"];
    retval.dividend_type = json["dividend_type"];
    retval.frequency = json["frequency"];
    retval.fund = json["fund"];
    retval.fund_source = json["fund_source"];
    retval.instalment_amount = json["instalment_amount"];
    retval.instalment_day = json["instalment_day"];
    retval.instalments = json["instalments"];
    retval.last_instalment = json["last_instalment"];
    retval.next_instalment = json["next_instalment"];
    retval.pending_instalments = json["pending_instalments"];
    retval.sip_id = json["sip_id"];
    retval.sip_reg_num = json["sip_reg_num"];
    retval.sip_type = json["sip_type"];
    retval.status = json["status"];
    retval.step_up = json["step_up"];
    retval.tag = json["tag"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];
    retval.trigger_price = json["trigger_price"];

    return retval;
}

class CompletedInstalments {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

CompletedInstalments CompletedInstalments_from_JSON(mixed json) {
    CompletedInstalments retval = CompletedInstalments();

    retval.type = json["type"];

    return retval;
}

enum Type {
    INTEGER = "integer", // json: "integer"
    NULL = "null",       // json: "null"
    NUMBER = "number",   // json: "number"
    STRING = "string",   // json: "string"
}

class Created {
    string format; // json: "format"
    Type   type;   // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "format" : format,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Created Created_from_JSON(mixed json) {
    Created retval = Created();

    retval.format = json["format"];
    retval.type = json["type"];

    return retval;
}

class StepUp {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

StepUp StepUp_from_JSON(mixed json) {
    StepUp retval = StepUp();

    retval.ref = json["$ref"];

    return retval;
}

class MfsipInfoClass {
    bool                additional_properties; // json: "additionalProperties"
    MfsipInfoProperties properties;            // json: "properties"
    array(string)       required;              // json: "required"
    string              title;                 // json: "title"
    string              type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfsipInfoClass MfsipInfoClass_from_JSON(mixed json) {
    MfsipInfoClass retval = MfsipInfoClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class MfsipInfoProperties {
    StepUp               data;   // json: "data"
    CompletedInstalments status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfsipInfoProperties MfsipInfoProperties_from_JSON(mixed json) {
    MfsipInfoProperties retval = MfsipInfoProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class StepUpClass {
    bool             additional_properties; // json: "additionalProperties"
    StepUpProperties properties;            // json: "properties"
    array(string)    required;              // json: "required"
    string           title;                 // json: "title"
    string           type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

StepUpClass StepUpClass_from_JSON(mixed json) {
    StepUpClass retval = StepUpClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class StepUpProperties {
    CompletedInstalments the_1502; // json: "15-02"

    string encode_json() {
        mapping(string:mixed) json = ([
            "15-02" : the_1502,
        ]);

        return Standards.JSON.encode(json);
    }
}

StepUpProperties StepUpProperties_from_JSON(mixed json) {
    StepUpProperties retval = StepUpProperties();

    retval.the_1502 = json["15-02"];

    return retval;
}
