// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class OrderInfo {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderInfo OrderInfo_from_JSON(mixed json) {
    OrderInfo retval = OrderInfo();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Datum          datum;      // json: "Datum"
    OrderInfoClass order_info; // json: "OrderInfo"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Datum" : datum,
            "OrderInfo" : order_info,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.datum = json["Datum"];
    retval.order_info = json["OrderInfo"];

    return retval;
}

class Datum {
    bool            additional_properties; // json: "additionalProperties"
    DatumProperties properties;            // json: "properties"
    array(string)   required;              // json: "required"
    string          title;                 // json: "title"
    string          type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DatumProperties {
    AveragePrice      average_price;      // json: "average_price"
    AveragePrice      cancelled_quantity; // json: "cancelled_quantity"
    AveragePrice      disclosed_quantity; // json: "disclosed_quantity"
    AveragePrice      exchange;           // json: "exchange"
    ExchangeOrderId   exchange_order_id;  // json: "exchange_order_id"
    ExchangeTimestamp exchange_timestamp; // json: "exchange_timestamp"
    AveragePrice      filled_quantity;    // json: "filled_quantity"
    AveragePrice      instrument_token;   // json: "instrument_token"
    AveragePrice      order_id;           // json: "order_id"
    OrderTimestamp    order_timestamp;    // json: "order_timestamp"
    AveragePrice      order_type;         // json: "order_type"
    AveragePrice      parent_order_id;    // json: "parent_order_id"
    AveragePrice      pending_quantity;   // json: "pending_quantity"
    AveragePrice      placed_by;          // json: "placed_by"
    AveragePrice      price;              // json: "price"
    AveragePrice      product;            // json: "product"
    AveragePrice      quantity;           // json: "quantity"
    AveragePrice      status;             // json: "status"
    AveragePrice      status_message;     // json: "status_message"
    AveragePrice      tag;                // json: "tag"
    AveragePrice      tradingsymbol;      // json: "tradingsymbol"
    AveragePrice      transaction_type;   // json: "transaction_type"
    AveragePrice      trigger_price;      // json: "trigger_price"
    AveragePrice      validity;           // json: "validity"
    AveragePrice      variety;            // json: "variety"

    string encode_json() {
        mapping(string:mixed) json = ([
            "average_price" : average_price,
            "cancelled_quantity" : cancelled_quantity,
            "disclosed_quantity" : disclosed_quantity,
            "exchange" : exchange,
            "exchange_order_id" : exchange_order_id,
            "exchange_timestamp" : exchange_timestamp,
            "filled_quantity" : filled_quantity,
            "instrument_token" : instrument_token,
            "order_id" : order_id,
            "order_timestamp" : order_timestamp,
            "order_type" : order_type,
            "parent_order_id" : parent_order_id,
            "pending_quantity" : pending_quantity,
            "placed_by" : placed_by,
            "price" : price,
            "product" : product,
            "quantity" : quantity,
            "status" : status,
            "status_message" : status_message,
            "tag" : tag,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
            "trigger_price" : trigger_price,
            "validity" : validity,
            "variety" : variety,
        ]);

        return Standards.JSON.encode(json);
    }
}

DatumProperties DatumProperties_from_JSON(mixed json) {
    DatumProperties retval = DatumProperties();

    retval.average_price = json["average_price"];
    retval.cancelled_quantity = json["cancelled_quantity"];
    retval.disclosed_quantity = json["disclosed_quantity"];
    retval.exchange = json["exchange"];
    retval.exchange_order_id = json["exchange_order_id"];
    retval.exchange_timestamp = json["exchange_timestamp"];
    retval.filled_quantity = json["filled_quantity"];
    retval.instrument_token = json["instrument_token"];
    retval.order_id = json["order_id"];
    retval.order_timestamp = json["order_timestamp"];
    retval.order_type = json["order_type"];
    retval.parent_order_id = json["parent_order_id"];
    retval.pending_quantity = json["pending_quantity"];
    retval.placed_by = json["placed_by"];
    retval.price = json["price"];
    retval.product = json["product"];
    retval.quantity = json["quantity"];
    retval.status = json["status"];
    retval.status_message = json["status_message"];
    retval.tag = json["tag"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];
    retval.trigger_price = json["trigger_price"];
    retval.validity = json["validity"];
    retval.variety = json["variety"];

    return retval;
}

class AveragePrice {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

AveragePrice AveragePrice_from_JSON(mixed json) {
    AveragePrice retval = AveragePrice();

    retval.type = json["type"];

    return retval;
}

enum Type {
    INTEGER = "integer", // json: "integer"
    NULL = "null",       // json: "null"
    NUMBER = "number",   // json: "number"
    STRING = "string",   // json: "string"
}

class ExchangeOrderId {
    array(AveragePrice) any_of; // json: "anyOf"

    string encode_json() {
        mapping(string:mixed) json = ([
            "anyOf" : any_of,
        ]);

        return Standards.JSON.encode(json);
    }
}

ExchangeOrderId ExchangeOrderId_from_JSON(mixed json) {
    ExchangeOrderId retval = ExchangeOrderId();

    retval.any_of = json["anyOf"];

    return retval;
}

class ExchangeTimestamp {
    array(OrderTimestamp) any_of; // json: "anyOf"

    string encode_json() {
        mapping(string:mixed) json = ([
            "anyOf" : any_of,
        ]);

        return Standards.JSON.encode(json);
    }
}

ExchangeTimestamp ExchangeTimestamp_from_JSON(mixed json) {
    ExchangeTimestamp retval = ExchangeTimestamp();

    retval.any_of = json["anyOf"];

    return retval;
}

class OrderTimestamp {
    mixed|string format; // json: "format"
    Type         type;   // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "format" : format,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderTimestamp OrderTimestamp_from_JSON(mixed json) {
    OrderTimestamp retval = OrderTimestamp();

    retval.format = json["format"];
    retval.type = json["type"];

    return retval;
}

class OrderInfoClass {
    bool                additional_properties; // json: "additionalProperties"
    OrderInfoProperties properties;            // json: "properties"
    array(string)       required;              // json: "required"
    string              title;                 // json: "title"
    string              type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderInfoClass OrderInfoClass_from_JSON(mixed json) {
    OrderInfoClass retval = OrderInfoClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class OrderInfoProperties {
    Data         data;   // json: "data"
    AveragePrice status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderInfoProperties OrderInfoProperties_from_JSON(mixed json) {
    OrderInfoProperties retval = OrderInfoProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Items  items; // json: "items"
    string type;  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "items" : items,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.items = json["items"];
    retval.type = json["type"];

    return retval;
}

class Items {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

Items Items_from_JSON(mixed json) {
    Items retval = Items();

    retval.ref = json["$ref"];

    return retval;
}
