// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class OrderMargins {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderMargins OrderMargins_from_JSON(mixed json) {
    OrderMargins retval = OrderMargins();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Datum             datum;         // json: "Datum"
    OrderMarginsClass order_margins; // json: "OrderMargins"
    PnlClass          pnl;           // json: "Pnl"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Datum" : datum,
            "OrderMargins" : order_margins,
            "Pnl" : pnl,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.datum = json["Datum"];
    retval.order_margins = json["OrderMargins"];
    retval.pnl = json["Pnl"];

    return retval;
}

class Datum {
    bool            additional_properties; // json: "additionalProperties"
    DatumProperties properties;            // json: "properties"
    array(string)   required;              // json: "required"
    string          title;                 // json: "title"
    string          type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DatumProperties {
    Additional additional;     // json: "additional"
    Additional bo;             // json: "bo"
    Additional cash;           // json: "cash"
    Additional exchange;       // json: "exchange"
    Additional exposure;       // json: "exposure"
    Additional option_premium; // json: "option_premium"
    Pnl        pnl;            // json: "pnl"
    Additional span;           // json: "span"
    Additional total;          // json: "total"
    Additional tradingsymbol;  // json: "tradingsymbol"
    Additional type;           // json: "type"
    Additional var;            // json: "var"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additional" : additional,
            "bo" : bo,
            "cash" : cash,
            "exchange" : exchange,
            "exposure" : exposure,
            "option_premium" : option_premium,
            "pnl" : pnl,
            "span" : span,
            "total" : total,
            "tradingsymbol" : tradingsymbol,
            "type" : type,
            "var" : var,
        ]);

        return Standards.JSON.encode(json);
    }
}

DatumProperties DatumProperties_from_JSON(mixed json) {
    DatumProperties retval = DatumProperties();

    retval.additional = json["additional"];
    retval.bo = json["bo"];
    retval.cash = json["cash"];
    retval.exchange = json["exchange"];
    retval.exposure = json["exposure"];
    retval.option_premium = json["option_premium"];
    retval.pnl = json["pnl"];
    retval.span = json["span"];
    retval.total = json["total"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.type = json["type"];
    retval.var = json["var"];

    return retval;
}

class Additional {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Additional Additional_from_JSON(mixed json) {
    Additional retval = Additional();

    retval.type = json["type"];

    return retval;
}

enum Type {
    INTEGER = "integer", // json: "integer"
    NUMBER = "number",   // json: "number"
    STRING = "string",   // json: "string"
}

class Pnl {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

Pnl Pnl_from_JSON(mixed json) {
    Pnl retval = Pnl();

    retval.ref = json["$ref"];

    return retval;
}

class OrderMarginsClass {
    bool                   additional_properties; // json: "additionalProperties"
    OrderMarginsProperties properties;            // json: "properties"
    array(string)          required;              // json: "required"
    string                 title;                 // json: "title"
    string                 type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderMarginsClass OrderMarginsClass_from_JSON(mixed json) {
    OrderMarginsClass retval = OrderMarginsClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class OrderMarginsProperties {
    Data       data;   // json: "data"
    Additional status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderMarginsProperties OrderMarginsProperties_from_JSON(mixed json) {
    OrderMarginsProperties retval = OrderMarginsProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Pnl    items; // json: "items"
    string type;  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "items" : items,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.items = json["items"];
    retval.type = json["type"];

    return retval;
}

class PnlClass {
    bool          additional_properties; // json: "additionalProperties"
    PnlProperties properties;            // json: "properties"
    array(string) required;              // json: "required"
    string        title;                 // json: "title"
    string        type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

PnlClass PnlClass_from_JSON(mixed json) {
    PnlClass retval = PnlClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class PnlProperties {
    Additional realised;   // json: "realised"
    Additional unrealised; // json: "unrealised"

    string encode_json() {
        mapping(string:mixed) json = ([
            "realised" : realised,
            "unrealised" : unrealised,
        ]);

        return Standards.JSON.encode(json);
    }
}

PnlProperties PnlProperties_from_JSON(mixed json) {
    PnlProperties retval = PnlProperties();

    retval.realised = json["realised"];
    retval.unrealised = json["unrealised"];

    return retval;
}
