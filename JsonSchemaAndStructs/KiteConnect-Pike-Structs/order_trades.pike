// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class OrderTrades {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderTrades OrderTrades_from_JSON(mixed json) {
    OrderTrades retval = OrderTrades();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Datum            datum;        // json: "Datum"
    OrderTradesClass order_trades; // json: "OrderTrades"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Datum" : datum,
            "OrderTrades" : order_trades,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.datum = json["Datum"];
    retval.order_trades = json["OrderTrades"];

    return retval;
}

class Datum {
    bool            additional_properties; // json: "additionalProperties"
    DatumProperties properties;            // json: "properties"
    array(string)   required;              // json: "required"
    string          title;                 // json: "title"
    string          type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DatumProperties {
    AveragePrice      average_price;      // json: "average_price"
    AveragePrice      exchange;           // json: "exchange"
    AveragePrice      exchange_order_id;  // json: "exchange_order_id"
    ExchangeTimestamp exchange_timestamp; // json: "exchange_timestamp"
    ExchangeTimestamp fill_timestamp;     // json: "fill_timestamp"
    AveragePrice      instrument_token;   // json: "instrument_token"
    AveragePrice      order_id;           // json: "order_id"
    ExchangeTimestamp order_timestamp;    // json: "order_timestamp"
    AveragePrice      product;            // json: "product"
    AveragePrice      quantity;           // json: "quantity"
    ExchangeTimestamp trade_id;           // json: "trade_id"
    AveragePrice      tradingsymbol;      // json: "tradingsymbol"
    AveragePrice      transaction_type;   // json: "transaction_type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "average_price" : average_price,
            "exchange" : exchange,
            "exchange_order_id" : exchange_order_id,
            "exchange_timestamp" : exchange_timestamp,
            "fill_timestamp" : fill_timestamp,
            "instrument_token" : instrument_token,
            "order_id" : order_id,
            "order_timestamp" : order_timestamp,
            "product" : product,
            "quantity" : quantity,
            "trade_id" : trade_id,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
        ]);

        return Standards.JSON.encode(json);
    }
}

DatumProperties DatumProperties_from_JSON(mixed json) {
    DatumProperties retval = DatumProperties();

    retval.average_price = json["average_price"];
    retval.exchange = json["exchange"];
    retval.exchange_order_id = json["exchange_order_id"];
    retval.exchange_timestamp = json["exchange_timestamp"];
    retval.fill_timestamp = json["fill_timestamp"];
    retval.instrument_token = json["instrument_token"];
    retval.order_id = json["order_id"];
    retval.order_timestamp = json["order_timestamp"];
    retval.product = json["product"];
    retval.quantity = json["quantity"];
    retval.trade_id = json["trade_id"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];

    return retval;
}

class AveragePrice {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

AveragePrice AveragePrice_from_JSON(mixed json) {
    AveragePrice retval = AveragePrice();

    retval.type = json["type"];

    return retval;
}

enum Type {
    INTEGER = "integer", // json: "integer"
    STRING = "string",   // json: "string"
}

class ExchangeTimestamp {
    string format; // json: "format"
    Type   type;   // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "format" : format,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

ExchangeTimestamp ExchangeTimestamp_from_JSON(mixed json) {
    ExchangeTimestamp retval = ExchangeTimestamp();

    retval.format = json["format"];
    retval.type = json["type"];

    return retval;
}

class OrderTradesClass {
    bool                  additional_properties; // json: "additionalProperties"
    OrderTradesProperties properties;            // json: "properties"
    array(string)         required;              // json: "required"
    string                title;                 // json: "title"
    string                type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderTradesClass OrderTradesClass_from_JSON(mixed json) {
    OrderTradesClass retval = OrderTradesClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class OrderTradesProperties {
    Data         data;   // json: "data"
    AveragePrice status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderTradesProperties OrderTradesProperties_from_JSON(mixed json) {
    OrderTradesProperties retval = OrderTradesProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Items  items; // json: "items"
    string type;  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "items" : items,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.items = json["items"];
    retval.type = json["type"];

    return retval;
}

class Items {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

Items Items_from_JSON(mixed json) {
    Items retval = Items();

    retval.ref = json["$ref"];

    return retval;
}
