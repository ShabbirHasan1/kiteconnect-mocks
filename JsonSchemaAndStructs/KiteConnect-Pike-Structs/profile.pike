// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class Profile {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

Profile Profile_from_JSON(mixed json) {
    Profile retval = Profile();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Data         data;    // json: "Data"
    MetaClass    meta;    // json: "Meta"
    ProfileClass profile; // json: "Profile"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Data" : data,
            "Meta" : meta,
            "Profile" : profile,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.data = json["Data"];
    retval.meta = json["Meta"];
    retval.profile = json["Profile"];

    return retval;
}

class Data {
    bool           additional_properties; // json: "additionalProperties"
    DataProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DataProperties {
    AvatarUrl avatar_url;     // json: "avatar_url"
    AvatarUrl broker;         // json: "broker"
    AvatarUrl email;          // json: "email"
    Exchanges exchanges;      // json: "exchanges"
    Meta      meta;           // json: "meta"
    Exchanges order_types;    // json: "order_types"
    Exchanges products;       // json: "products"
    AvatarUrl user_id;        // json: "user_id"
    AvatarUrl user_name;      // json: "user_name"
    AvatarUrl user_shortname; // json: "user_shortname"
    AvatarUrl user_type;      // json: "user_type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "avatar_url" : avatar_url,
            "broker" : broker,
            "email" : email,
            "exchanges" : exchanges,
            "meta" : meta,
            "order_types" : order_types,
            "products" : products,
            "user_id" : user_id,
            "user_name" : user_name,
            "user_shortname" : user_shortname,
            "user_type" : user_type,
        ]);

        return Standards.JSON.encode(json);
    }
}

DataProperties DataProperties_from_JSON(mixed json) {
    DataProperties retval = DataProperties();

    retval.avatar_url = json["avatar_url"];
    retval.broker = json["broker"];
    retval.email = json["email"];
    retval.exchanges = json["exchanges"];
    retval.meta = json["meta"];
    retval.order_types = json["order_types"];
    retval.products = json["products"];
    retval.user_id = json["user_id"];
    retval.user_name = json["user_name"];
    retval.user_shortname = json["user_shortname"];
    retval.user_type = json["user_type"];

    return retval;
}

class AvatarUrl {
    Type type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

AvatarUrl AvatarUrl_from_JSON(mixed json) {
    AvatarUrl retval = AvatarUrl();

    retval.type = json["type"];

    return retval;
}

enum Type {
    NULL = "null",     // json: "null"
    STRING = "string", // json: "string"
}

class Exchanges {
    AvatarUrl items; // json: "items"
    string    type;  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "items" : items,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Exchanges Exchanges_from_JSON(mixed json) {
    Exchanges retval = Exchanges();

    retval.items = json["items"];
    retval.type = json["type"];

    return retval;
}

class Meta {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

Meta Meta_from_JSON(mixed json) {
    Meta retval = Meta();

    retval.ref = json["$ref"];

    return retval;
}

class MetaClass {
    bool           additional_properties; // json: "additionalProperties"
    MetaProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

MetaClass MetaClass_from_JSON(mixed json) {
    MetaClass retval = MetaClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class MetaProperties {
    AvatarUrl demat_consent; // json: "demat_consent"

    string encode_json() {
        mapping(string:mixed) json = ([
            "demat_consent" : demat_consent,
        ]);

        return Standards.JSON.encode(json);
    }
}

MetaProperties MetaProperties_from_JSON(mixed json) {
    MetaProperties retval = MetaProperties();

    retval.demat_consent = json["demat_consent"];

    return retval;
}

class ProfileClass {
    bool              additional_properties; // json: "additionalProperties"
    ProfileProperties properties;            // json: "properties"
    array(string)     required;              // json: "required"
    string            title;                 // json: "title"
    string            type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

ProfileClass ProfileClass_from_JSON(mixed json) {
    ProfileClass retval = ProfileClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class ProfileProperties {
    Meta      data;   // json: "data"
    AvatarUrl status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

ProfileProperties ProfileProperties_from_JSON(mixed json) {
    ProfileProperties retval = ProfileProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}
