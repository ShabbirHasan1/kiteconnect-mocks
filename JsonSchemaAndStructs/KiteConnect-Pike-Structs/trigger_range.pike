// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class TriggerRange {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

TriggerRange TriggerRange_from_JSON(mixed json) {
    TriggerRange retval = TriggerRange();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Data              data;          // json: "Data"
    Nse               nse;           // json: "Nse"
    TriggerRangeClass trigger_range; // json: "TriggerRange"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Data" : data,
            "Nse" : nse,
            "TriggerRange" : trigger_range,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.data = json["Data"];
    retval.nse = json["Nse"];
    retval.trigger_range = json["TriggerRange"];

    return retval;
}

class Data {
    bool           additional_properties; // json: "additionalProperties"
    DataProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DataProperties {
    NseInfy nse_infy;     // json: "NSE:INFY"
    NseInfy nse_reliance; // json: "NSE:RELIANCE"

    string encode_json() {
        mapping(string:mixed) json = ([
            "NSE:INFY" : nse_infy,
            "NSE:RELIANCE" : nse_reliance,
        ]);

        return Standards.JSON.encode(json);
    }
}

DataProperties DataProperties_from_JSON(mixed json) {
    DataProperties retval = DataProperties();

    retval.nse_infy = json["NSE:INFY"];
    retval.nse_reliance = json["NSE:RELIANCE"];

    return retval;
}

class NseInfy {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfy NseInfy_from_JSON(mixed json) {
    NseInfy retval = NseInfy();

    retval.ref = json["$ref"];

    return retval;
}

class Nse {
    bool          additional_properties; // json: "additionalProperties"
    NseProperties properties;            // json: "properties"
    array(string) required;              // json: "required"
    string        title;                 // json: "title"
    string        type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Nse Nse_from_JSON(mixed json) {
    Nse retval = Nse();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class NseProperties {
    InstrumentToken instrument_token; // json: "instrument_token"
    InstrumentToken lower;            // json: "lower"
    InstrumentToken upper;            // json: "upper"

    string encode_json() {
        mapping(string:mixed) json = ([
            "instrument_token" : instrument_token,
            "lower" : lower,
            "upper" : upper,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseProperties NseProperties_from_JSON(mixed json) {
    NseProperties retval = NseProperties();

    retval.instrument_token = json["instrument_token"];
    retval.lower = json["lower"];
    retval.upper = json["upper"];

    return retval;
}

class InstrumentToken {
    string type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

InstrumentToken InstrumentToken_from_JSON(mixed json) {
    InstrumentToken retval = InstrumentToken();

    retval.type = json["type"];

    return retval;
}

class TriggerRangeClass {
    bool                   additional_properties; // json: "additionalProperties"
    TriggerRangeProperties properties;            // json: "properties"
    array(string)          required;              // json: "required"
    string                 title;                 // json: "title"
    string                 type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

TriggerRangeClass TriggerRangeClass_from_JSON(mixed json) {
    TriggerRangeClass retval = TriggerRangeClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class TriggerRangeProperties {
    NseInfy         data;   // json: "data"
    InstrumentToken status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

TriggerRangeProperties TriggerRangeProperties_from_JSON(mixed json) {
    TriggerRangeProperties retval = TriggerRangeProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}
